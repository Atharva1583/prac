#include <bits/stdc++.h>
using namespace std;

bool isSafe(int row, int col, vector<string> board, int n)
{
    int dupRow = row;
    int dupCol = col;
    // checking diagonally 
    while (row >= 0 && col >= 0)
    {
        if (board[row][col] == 'Q')
        {
            return false;
        }
        row--;
        col--;
    }
    col = dupCol;
    row = dupRow;
    // checking horizontally 
    while (col >= 0)
    {
        if (board[row][col] == 'Q')
            return false;
        col--;
    }

    row = dupRow;
    col = dupCol;
    
    while (row < n && col >= 0)
    {
        if (board[row][col] == 'Q')
            return false;
        row++;
        col--;
    }
    return true;
}

void f(int col, vector<string> &board, vector<vector<string>> &ans, int n)
{
    // base case , all queens are placed
    if (col == n)
    {
        ans.push_back(board);
        return;
    }
    for (int row = 0; row < n; row++)
    {
        if (isSafe(row, col, board, n))
        {
            // if the current position (row,col) is safe that is no other queen is attacking this queen then place the queen at this position and then call the function to place other queens 
            // and now backtrack i.e. remove the queen from this position
            board[row][col] = 'Q';
            f(col + 1, board, ans, n);
            board[row][col] = '.';
        }
    }
}
vector<vector<string>> solve(int n,int pos)
{
    vector<vector<string>> ans;
    vector<string> board(n);
    string s(n, '.');
    for (int i = 0; i < n; i++)
    {
        board[i] = s;
    }
    board[pos][0]='Q';
    f(1, board, ans, n);
    return ans;
}

int main()
{
    int n;
    cin >> n;
    int pos;
    cin>>pos;
    vector<vector<string>> ans = solve(n,pos);
    for (int i = 0; i < ans.size(); i++)
    {
        cout << "Arrangement " << i + 1 << "\n";
        for (int j = 0; j < ans[0].size(); j++)
        {
            cout << ans[i][j];
            cout << endl;
        }
        cout << endl;
    }
    return 0;
}